#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4961
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BatDongSan
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="WebBatDongSan")]
	public partial class BDSDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdministrator(Administrator instance);
    partial void UpdateAdministrator(Administrator instance);
    partial void DeleteAdministrator(Administrator instance);
    partial void InsertSupporter(Supporter instance);
    partial void UpdateSupporter(Supporter instance);
    partial void DeleteSupporter(Supporter instance);
    partial void InsertArticle(Article instance);
    partial void UpdateArticle(Article instance);
    partial void DeleteArticle(Article instance);
    partial void InsertHeaderPic(HeaderPic instance);
    partial void UpdateHeaderPic(HeaderPic instance);
    partial void DeleteHeaderPic(HeaderPic instance);
    partial void InsertHouse(House instance);
    partial void UpdateHouse(House instance);
    partial void DeleteHouse(House instance);
    partial void InsertOtherPage(OtherPage instance);
    partial void UpdateOtherPage(OtherPage instance);
    partial void DeleteOtherPage(OtherPage instance);
    partial void InsertPartner(Partner instance);
    partial void UpdatePartner(Partner instance);
    partial void DeletePartner(Partner instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertAdv(Adv instance);
    partial void UpdateAdv(Adv instance);
    partial void DeleteAdv(Adv instance);
    partial void InsertLRBanner(LRBanner instance);
    partial void UpdateLRBanner(LRBanner instance);
    partial void DeleteLRBanner(LRBanner instance);
    #endregion
		
		public BDSDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["WebBatDongSanConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BDSDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BDSDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BDSDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BDSDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Administrator> Administrators
		{
			get
			{
				return this.GetTable<Administrator>();
			}
		}
		
		public System.Data.Linq.Table<Supporter> Supporters
		{
			get
			{
				return this.GetTable<Supporter>();
			}
		}
		
		public System.Data.Linq.Table<Article> Articles
		{
			get
			{
				return this.GetTable<Article>();
			}
		}
		
		public System.Data.Linq.Table<HeaderPic> HeaderPics
		{
			get
			{
				return this.GetTable<HeaderPic>();
			}
		}
		
		public System.Data.Linq.Table<House> Houses
		{
			get
			{
				return this.GetTable<House>();
			}
		}
		
		public System.Data.Linq.Table<OtherPage> OtherPages
		{
			get
			{
				return this.GetTable<OtherPage>();
			}
		}
		
		public System.Data.Linq.Table<Partner> Partners
		{
			get
			{
				return this.GetTable<Partner>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<Adv> Advs
		{
			get
			{
				return this.GetTable<Adv>();
			}
		}
		
		public System.Data.Linq.Table<LRBanner> LRBanners
		{
			get
			{
				return this.GetTable<LRBanner>();
			}
		}
	}
	
	[Table(Name="dbo.Administrator")]
	public partial class Administrator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _UserName;
		
		private string _Password;
		
		private bool _Super;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnSuperChanging(bool value);
    partial void OnSuperChanged();
    #endregion
		
		public Administrator()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Super", DbType="Bit NOT NULL")]
		public bool Super
		{
			get
			{
				return this._Super;
			}
			set
			{
				if ((this._Super != value))
				{
					this.OnSuperChanging(value);
					this.SendPropertyChanging();
					this._Super = value;
					this.SendPropertyChanged("Super");
					this.OnSuperChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Supporter")]
	public partial class Supporter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Phone;
		
		private string _Yahoo;
		
		private bool _IsValid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnYahooChanging(string value);
    partial void OnYahooChanged();
    partial void OnIsValidChanging(bool value);
    partial void OnIsValidChanged();
    #endregion
		
		public Supporter()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Yahoo", DbType="VarChar(50)")]
		public string Yahoo
		{
			get
			{
				return this._Yahoo;
			}
			set
			{
				if ((this._Yahoo != value))
				{
					this.OnYahooChanging(value);
					this.SendPropertyChanging();
					this._Yahoo = value;
					this.SendPropertyChanged("Yahoo");
					this.OnYahooChanged();
				}
			}
		}
		
		[Column(Storage="_IsValid", DbType="Bit NOT NULL")]
		public bool IsValid
		{
			get
			{
				return this._IsValid;
			}
			set
			{
				if ((this._IsValid != value))
				{
					this.OnIsValidChanging(value);
					this.SendPropertyChanging();
					this._IsValid = value;
					this.SendPropertyChanged("IsValid");
					this.OnIsValidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Article")]
	public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Title;
		
		private string _Summary;
		
		private string _Contents;
		
		private System.DateTime _PostDate;
		
		private System.DateTime _LatestModifiedDate;
		
		private bool _IsValid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSummaryChanging(string value);
    partial void OnSummaryChanged();
    partial void OnContentsChanging(string value);
    partial void OnContentsChanged();
    partial void OnPostDateChanging(System.DateTime value);
    partial void OnPostDateChanged();
    partial void OnLatestModifiedDateChanging(System.DateTime value);
    partial void OnLatestModifiedDateChanged();
    partial void OnIsValidChanging(bool value);
    partial void OnIsValidChanged();
    #endregion
		
		public Article()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Summary", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Summary
		{
			get
			{
				return this._Summary;
			}
			set
			{
				if ((this._Summary != value))
				{
					this.OnSummaryChanging(value);
					this.SendPropertyChanging();
					this._Summary = value;
					this.SendPropertyChanged("Summary");
					this.OnSummaryChanged();
				}
			}
		}
		
		[Column(Storage="_Contents", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				if ((this._Contents != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		[Column(Storage="_PostDate", DbType="DateTime NOT NULL")]
		public System.DateTime PostDate
		{
			get
			{
				return this._PostDate;
			}
			set
			{
				if ((this._PostDate != value))
				{
					this.OnPostDateChanging(value);
					this.SendPropertyChanging();
					this._PostDate = value;
					this.SendPropertyChanged("PostDate");
					this.OnPostDateChanged();
				}
			}
		}
		
		[Column(Storage="_LatestModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LatestModifiedDate
		{
			get
			{
				return this._LatestModifiedDate;
			}
			set
			{
				if ((this._LatestModifiedDate != value))
				{
					this.OnLatestModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LatestModifiedDate = value;
					this.SendPropertyChanged("LatestModifiedDate");
					this.OnLatestModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsValid", DbType="Bit NOT NULL")]
		public bool IsValid
		{
			get
			{
				return this._IsValid;
			}
			set
			{
				if ((this._IsValid != value))
				{
					this.OnIsValidChanging(value);
					this.SendPropertyChanging();
					this._IsValid = value;
					this.SendPropertyChanged("IsValid");
					this.OnIsValidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.HeaderPic")]
	public partial class HeaderPic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Url;
		
		private string _Thumbnail;
		
		private bool _IsValid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnThumbnailChanging(string value);
    partial void OnThumbnailChanged();
    partial void OnIsValidChanging(bool value);
    partial void OnIsValidChanged();
    #endregion
		
		public HeaderPic()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Column(Storage="_Thumbnail", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Thumbnail
		{
			get
			{
				return this._Thumbnail;
			}
			set
			{
				if ((this._Thumbnail != value))
				{
					this.OnThumbnailChanging(value);
					this.SendPropertyChanging();
					this._Thumbnail = value;
					this.SendPropertyChanged("Thumbnail");
					this.OnThumbnailChanged();
				}
			}
		}
		
		[Column(Storage="_IsValid", DbType="Bit NOT NULL")]
		public bool IsValid
		{
			get
			{
				return this._IsValid;
			}
			set
			{
				if ((this._IsValid != value))
				{
					this.OnIsValidChanging(value);
					this.SendPropertyChanging();
					this._IsValid = value;
					this.SendPropertyChanged("IsValid");
					this.OnIsValidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.House")]
	public partial class House : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Title;
		
		private string _Thumbnail;
		
		private string _Picture;
		
		private string _Price;
		
		private string _Description;
		
		private System.Nullable<bool> _IsValid;
		
		private System.Nullable<long> _ViewCount;
		
		private bool _ForSale;
		
		private bool _ForRent;
		
		private bool _Agri;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnThumbnailChanging(string value);
    partial void OnThumbnailChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    partial void OnPriceChanging(string value);
    partial void OnPriceChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsValidChanging(System.Nullable<bool> value);
    partial void OnIsValidChanged();
    partial void OnViewCountChanging(System.Nullable<long> value);
    partial void OnViewCountChanged();
    partial void OnForSaleChanging(bool value);
    partial void OnForSaleChanged();
    partial void OnForRentChanging(bool value);
    partial void OnForRentChanged();
    partial void OnAgriChanging(bool value);
    partial void OnAgriChanged();
    #endregion
		
		public House()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(200)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Thumbnail", DbType="NVarChar(100)")]
		public string Thumbnail
		{
			get
			{
				return this._Thumbnail;
			}
			set
			{
				if ((this._Thumbnail != value))
				{
					this.OnThumbnailChanging(value);
					this.SendPropertyChanging();
					this._Thumbnail = value;
					this.SendPropertyChanged("Thumbnail");
					this.OnThumbnailChanged();
				}
			}
		}
		
		[Column(Storage="_Picture", DbType="VarChar(100)")]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="NVarChar(100)")]
		public string Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_IsValid", DbType="Bit")]
		public System.Nullable<bool> IsValid
		{
			get
			{
				return this._IsValid;
			}
			set
			{
				if ((this._IsValid != value))
				{
					this.OnIsValidChanging(value);
					this.SendPropertyChanging();
					this._IsValid = value;
					this.SendPropertyChanged("IsValid");
					this.OnIsValidChanged();
				}
			}
		}
		
		[Column(Storage="_ViewCount", DbType="BigInt")]
		public System.Nullable<long> ViewCount
		{
			get
			{
				return this._ViewCount;
			}
			set
			{
				if ((this._ViewCount != value))
				{
					this.OnViewCountChanging(value);
					this.SendPropertyChanging();
					this._ViewCount = value;
					this.SendPropertyChanged("ViewCount");
					this.OnViewCountChanged();
				}
			}
		}
		
		[Column(Storage="_ForSale", DbType="Bit NOT NULL")]
		public bool ForSale
		{
			get
			{
				return this._ForSale;
			}
			set
			{
				if ((this._ForSale != value))
				{
					this.OnForSaleChanging(value);
					this.SendPropertyChanging();
					this._ForSale = value;
					this.SendPropertyChanged("ForSale");
					this.OnForSaleChanged();
				}
			}
		}
		
		[Column(Storage="_ForRent", DbType="Bit NOT NULL")]
		public bool ForRent
		{
			get
			{
				return this._ForRent;
			}
			set
			{
				if ((this._ForRent != value))
				{
					this.OnForRentChanging(value);
					this.SendPropertyChanging();
					this._ForRent = value;
					this.SendPropertyChanged("ForRent");
					this.OnForRentChanged();
				}
			}
		}
		
		[Column(Storage="_Agri", DbType="Bit NOT NULL")]
		public bool Agri
		{
			get
			{
				return this._Agri;
			}
			set
			{
				if ((this._Agri != value))
				{
					this.OnAgriChanging(value);
					this.SendPropertyChanging();
					this._Agri = value;
					this.SendPropertyChanged("Agri");
					this.OnAgriChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OtherPage")]
	public partial class OtherPage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _PageName;
		
		private string _Contents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPageNameChanging(string value);
    partial void OnPageNameChanged();
    partial void OnContentsChanging(string value);
    partial void OnContentsChanged();
    #endregion
		
		public OtherPage()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PageName", DbType="NVarChar(50)")]
		public string PageName
		{
			get
			{
				return this._PageName;
			}
			set
			{
				if ((this._PageName != value))
				{
					this.OnPageNameChanging(value);
					this.SendPropertyChanging();
					this._PageName = value;
					this.SendPropertyChanged("PageName");
					this.OnPageNameChanged();
				}
			}
		}
		
		[Column(Storage="_Contents", DbType="NVarChar(MAX)")]
		public string Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				if ((this._Contents != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Partner")]
	public partial class Partner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private string _Contents;
		
		private bool _IsValid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnContentsChanging(string value);
    partial void OnContentsChanged();
    partial void OnIsValidChanging(bool value);
    partial void OnIsValidChanged();
    #endregion
		
		public Partner()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Contents", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				if ((this._Contents != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		[Column(Storage="_IsValid", DbType="Bit NOT NULL")]
		public bool IsValid
		{
			get
			{
				return this._IsValid;
			}
			set
			{
				if ((this._IsValid != value))
				{
					this.OnIsValidChanging(value);
					this.SendPropertyChanging();
					this._IsValid = value;
					this.SendPropertyChanged("IsValid");
					this.OnIsValidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Title;
		
		private string _Picture;
		
		private string _Summary;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _PostDate;
		
		private System.Nullable<System.DateTime> _LatestModifiedDate;
		
		private System.Nullable<long> _ViewCount;
		
		private bool _IsValid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    partial void OnSummaryChanging(string value);
    partial void OnSummaryChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPostDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPostDateChanged();
    partial void OnLatestModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLatestModifiedDateChanged();
    partial void OnViewCountChanging(System.Nullable<long> value);
    partial void OnViewCountChanged();
    partial void OnIsValidChanging(bool value);
    partial void OnIsValidChanged();
    #endregion
		
		public Project()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Picture", DbType="VarChar(100)")]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[Column(Storage="_Summary", DbType="NVarChar(250)")]
		public string Summary
		{
			get
			{
				return this._Summary;
			}
			set
			{
				if ((this._Summary != value))
				{
					this.OnSummaryChanging(value);
					this.SendPropertyChanging();
					this._Summary = value;
					this.SendPropertyChanged("Summary");
					this.OnSummaryChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_PostDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PostDate
		{
			get
			{
				return this._PostDate;
			}
			set
			{
				if ((this._PostDate != value))
				{
					this.OnPostDateChanging(value);
					this.SendPropertyChanging();
					this._PostDate = value;
					this.SendPropertyChanged("PostDate");
					this.OnPostDateChanged();
				}
			}
		}
		
		[Column(Storage="_LatestModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LatestModifiedDate
		{
			get
			{
				return this._LatestModifiedDate;
			}
			set
			{
				if ((this._LatestModifiedDate != value))
				{
					this.OnLatestModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LatestModifiedDate = value;
					this.SendPropertyChanged("LatestModifiedDate");
					this.OnLatestModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ViewCount", DbType="BigInt")]
		public System.Nullable<long> ViewCount
		{
			get
			{
				return this._ViewCount;
			}
			set
			{
				if ((this._ViewCount != value))
				{
					this.OnViewCountChanging(value);
					this.SendPropertyChanging();
					this._ViewCount = value;
					this.SendPropertyChanged("ViewCount");
					this.OnViewCountChanged();
				}
			}
		}
		
		[Column(Storage="_IsValid", DbType="Bit NOT NULL")]
		public bool IsValid
		{
			get
			{
				return this._IsValid;
			}
			set
			{
				if ((this._IsValid != value))
				{
					this.OnIsValidChanging(value);
					this.SendPropertyChanging();
					this._IsValid = value;
					this.SendPropertyChanged("IsValid");
					this.OnIsValidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Question")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private string _Email;
		
		private string _Phone;
		
		private string _QuestionText;
		
		private string _AnswerText;
		
		private System.DateTime _PostDate;
		
		private System.Nullable<System.DateTime> _AnswerDate;
		
		private bool _IsAnswered;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnQuestionTextChanging(string value);
    partial void OnQuestionTextChanged();
    partial void OnAnswerTextChanging(string value);
    partial void OnAnswerTextChanged();
    partial void OnPostDateChanging(System.DateTime value);
    partial void OnPostDateChanged();
    partial void OnAnswerDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAnswerDateChanged();
    partial void OnIsAnsweredChanging(bool value);
    partial void OnIsAnsweredChanged();
    #endregion
		
		public Question()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string QuestionText
		{
			get
			{
				return this._QuestionText;
			}
			set
			{
				if ((this._QuestionText != value))
				{
					this.OnQuestionTextChanging(value);
					this.SendPropertyChanging();
					this._QuestionText = value;
					this.SendPropertyChanged("QuestionText");
					this.OnQuestionTextChanged();
				}
			}
		}
		
		[Column(Storage="_AnswerText", DbType="NVarChar(MAX)")]
		public string AnswerText
		{
			get
			{
				return this._AnswerText;
			}
			set
			{
				if ((this._AnswerText != value))
				{
					this.OnAnswerTextChanging(value);
					this.SendPropertyChanging();
					this._AnswerText = value;
					this.SendPropertyChanged("AnswerText");
					this.OnAnswerTextChanged();
				}
			}
		}
		
		[Column(Storage="_PostDate", DbType="DateTime NOT NULL")]
		public System.DateTime PostDate
		{
			get
			{
				return this._PostDate;
			}
			set
			{
				if ((this._PostDate != value))
				{
					this.OnPostDateChanging(value);
					this.SendPropertyChanging();
					this._PostDate = value;
					this.SendPropertyChanged("PostDate");
					this.OnPostDateChanged();
				}
			}
		}
		
		[Column(Storage="_AnswerDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AnswerDate
		{
			get
			{
				return this._AnswerDate;
			}
			set
			{
				if ((this._AnswerDate != value))
				{
					this.OnAnswerDateChanging(value);
					this.SendPropertyChanging();
					this._AnswerDate = value;
					this.SendPropertyChanged("AnswerDate");
					this.OnAnswerDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsAnswered", DbType="Bit NOT NULL")]
		public bool IsAnswered
		{
			get
			{
				return this._IsAnswered;
			}
			set
			{
				if ((this._IsAnswered != value))
				{
					this.OnIsAnsweredChanging(value);
					this.SendPropertyChanging();
					this._IsAnswered = value;
					this.SendPropertyChanged("IsAnswered");
					this.OnIsAnsweredChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Adv")]
	public partial class Adv : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Picture;
		
		private string _Url;
		
		private bool _IsValid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnIsValidChanging(bool value);
    partial void OnIsValidChanged();
    #endregion
		
		public Adv()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Picture", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Column(Storage="_IsValid", DbType="Bit NOT NULL")]
		public bool IsValid
		{
			get
			{
				return this._IsValid;
			}
			set
			{
				if ((this._IsValid != value))
				{
					this.OnIsValidChanging(value);
					this.SendPropertyChanging();
					this._IsValid = value;
					this.SendPropertyChanged("IsValid");
					this.OnIsValidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.LRBanner")]
	public partial class LRBanner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Picture;
		
		private string _Url;
		
		private bool _IsValid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnIsValidChanging(bool value);
    partial void OnIsValidChanged();
    #endregion
		
		public LRBanner()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Picture", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Column(Storage="_IsValid", DbType="Bit NOT NULL")]
		public bool IsValid
		{
			get
			{
				return this._IsValid;
			}
			set
			{
				if ((this._IsValid != value))
				{
					this.OnIsValidChanging(value);
					this.SendPropertyChanging();
					this._IsValid = value;
					this.SendPropertyChanged("IsValid");
					this.OnIsValidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
