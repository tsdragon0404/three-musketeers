@using SMS.Common.Enums
@using SMS.Common.Storage
@using SMS.MvcApplication.Models
@using SMS.Common.Constant
@model CashierModel

<link rel="stylesheet" type="text/css" href="~/Content/css/split-pane.css" />
<link rel="stylesheet" type="text/css" media="print" href="~/Content/css/print.css" />
<script type="text/javascript" src="~/Scripts/split-pane.js"></script>
<script type="text/javascript" src="~/Scripts/jquery.validate.js"></script>
<script type="text/javascript" src="~/Scripts/custom-validate.js"></script>
<script type="text/javascript">
    var listProduct = @Html.Raw(JsonEncode(Model.ListProduct));
    var listArea = @Html.Raw(JsonEncode(Model.ListArea));
    var serviceFee = @SmsCache.BranchConfigs.Current.ServiceFee;
    var useServiceFee = "@SmsCache.BranchConfigs.Current.UseServiceFee";
    var currency = "@SmsCache.BranchConfigs.Current.Currency";
    
    /* Const initialization begin */
    var CONST_DATATABLE_FIRST = '@Html.Raw(SmsCache.Message.Get(ConstMessageIds.DataTable_First))';
    var CONST_DATATABLE_LAST = '@Html.Raw(SmsCache.Message.Get(ConstMessageIds.DataTable_Last))';
    var CONST_DATATABLE_NEXT = '@Html.Raw(SmsCache.Message.Get(ConstMessageIds.DataTable_Next))';
    var CONST_DATATABLE_PREVIOUS = '@Html.Raw(SmsCache.Message.Get(ConstMessageIds.DataTable_Previous))';
    var CONST_DATATABLE_NODATA = '@Html.Raw(SmsCache.Message.Get(ConstMessageIds.DataTable_NoData))';
    var CONST_DATATABLE_SHOWINGRECORDS = '@Html.Raw(SmsCache.Message.Get(ConstMessageIds.DataTable_ShowingRecords))';
    var CONST_DATATABLE_NOENTRIES = '@Html.Raw(SmsCache.Message.Get(ConstMessageIds.DataTable_NoEntries))';
    var CONST_DATATABLE_FILTER = '@Html.Raw(SmsCache.Message.Get(ConstMessageIds.DataTable_Filter))';
    var CONST_DATATABLE_SHOWENTRIES = '@Html.Raw(SmsCache.Message.Get(ConstMessageIds.DataTable_ShowEntries))';
    var CONST_DATATABLE_SEARCH = '@Html.Raw(SmsCache.Message.Get(ConstMessageIds.DataTable_Search))';
    var CONST_DATATABLE_NOMATCHINGDATA = '@Html.Raw(SmsCache.Message.Get(ConstMessageIds.DataTable_NoMatchingData))';
    /* Const initialization end */

    function GetOrderStatusName(orderStatus) {
        switch (orderStatus) {
        case @((int)OrderStatus.Ordered):
            return '@Html.Raw(SmsCache.BrandingText.Get(OrderStatus.Ordered))';
        case @((int)OrderStatus.SentToKitchen):
            return '@Html.Raw(SmsCache.BrandingText.Get(OrderStatus.SentToKitchen))';
        case @((int)OrderStatus.KitchenAccepted):
            return '@Html.Raw(SmsCache.BrandingText.Get(OrderStatus.KitchenAccepted))';
        case @((int)OrderStatus.KitchenRejected):
            return '@Html.Raw(SmsCache.BrandingText.Get(OrderStatus.KitchenRejected))';
        case @((int)OrderStatus.Done):
            return '@Html.Raw(SmsCache.BrandingText.Get(OrderStatus.Done))';
        default:
            return '';
        }
    }
</script>

@{
    Html.RenderPartial("Templates/Order");
    Html.RenderPartial("Templates/Discount");
    Html.RenderPartial("Templates/OrderTable");
    Html.RenderPartial("Templates/Table");
}

<div id="content" class="split-pane horizontal-percent cashier">
    <div id="area-table" class="split-pane-component">
        <ul id="areas">
            @if(Model.ListArea.Count > 1)
            {
                <li><a href="#area-0" data-labelID="lblAllArea">All</a></li>
            }
            @foreach (var area in Model.ListArea)
            {
                <li><a href="#area-@area.ID">@area.Name</a></li>
            }
            
            <li style="float: right">
                <button id="saveCashierInfo" data-globalLabelID="lblSaveCashierInfo">Save cashier info</button>
            </li>

        </ul>
        <div id="tables">
            @if(Model.ListArea.Count > 1)
            {
                <div id="area-0"></div>
            }
            @foreach (var areaDto in Model.ListArea)
            {
                <div id="area-@areaDto.ID"></div>
            }
        </div>
    </div>

    <div class="split-pane-divider"></div>
    
    <div id="tableorder" class="split-pane-component">
        <input type="hidden" id="curOrderID" value="-1" />
        <input type="hidden" id="curOrderTableID" value="-1" />
        <div class="row border-bottom div-header" id="order-header">
            <div class="four columns">
                <span data-labelID="lblOrderNumber" class="label-custom-label">Order Number:</span> <span id="curOrderNumber" class="label-custom-data"></span>
            </div>
            <div class="eight columns">
                <span data-labelID="lblCustomerName" id="lblCustomerName" class="link-label label-custom-label">Customer name:</span>&nbsp;
                <span id="curCustomerName" class="label-custom-data"></span>
            </div>
        </div>
        <div id="order-detail">
            <div class="row" id="tblContent"></div>
            <div class="row" id="button-payment">
                <div class="four columns right border-top payment">
                    <button id="payment" data-labelID="lblPayment">Thanh toán</button>
                </div>
            </div>
        </div>
    </div>
    
    <table class="Rmenu" id="right-menu">
        <tr id="rmenu-detail">
            <td>
                <div class="rmenu-detail"></div>
            </td>
            <td class="RmenuItem" data-labelID="lblDetail">Chi tiết</td>
        </tr>
        <tr id="rmenu-useTable">
            <td>
                <div class="rmenu-add"></div>
            </td>
            <td class="RmenuItem" data-labelID="lblUseNow">Sử dụng ngay</td>
        </tr>
        <tr id="rmenu-move">
            <td>
                <div class="rmenu-move"></div>
            </td>
            <td class="RmenuItem" data-labelID="lblMoveTable">Chuyển bàn</td>
        </tr>
        <tr id="rmenu-pooling">
            <td>
                <div class="rmenu-pooling"></div>
            </td>
            <td class="RmenuItem" data-labelID="lblPoolingTable">Nhập bàn</td>
        </tr>
        <tr id="rmenu-del">
            <td>
                <div class="rmenu-delete"></div>
            </td>
            <td class="RmenuItem" data-labelID="lblDelete">Xóa thông tin</td>
        </tr>
    </table>
    <table class="Rmenu" id="changeCustomer">
        <tr>
            <td>
                <div class="menu-customer"></div>
            </td>
            <td class="RmenuItem" data-labelID="lblChangeCustomer">Change Customer</td>
        </tr>
    </table>
    <table class="Rmenu" id="changeTable">
        <tr>
            <td>
                <div class="rmenu-move"></div>
            </td>
            <td class="RmenuItem" data-labelID="lblMoveTable">Chuyển bàn</td>
        </tr>
    </table>
    <table class="Rmenu" id="mainRightMenu">
        <tr>
            <td>
                <div class="menu-reload"></div>
            </td>
            <td class="RmenuItem">Refresh</td>
        </tr>
    </table>

    @Html.Partial("SearchProductPopup", new PopupModel { PopupID = "pdtPopup", PopupTitle = "Search Product" })
    @Html.Partial("PaymentPopup", new PopupModel { PopupID = "pdtPayment", PopupTitle = "Payment" })
    @Html.Partial("DestinationTablePopup", new PopupModel { PopupID = "destinationTablePopup", PopupTitle = "Select destination table" })
    @Html.Partial("CustomerPopup", new PopupModel { PopupID = "pdtCustomer", PopupTitle = "Customer" })
</div>

<script type="text/javascript">
    var productPopup = new SearchProductPopup("pdtPopup", listProduct, onRefreshProduct, onSelectProduct);
    
    $(document).ready(function () {
        // setup split pane
        $('div.split-pane').splitPane();
        var paneheight = @SmsCache.UserContext.ListTableHeight + '%';
        $('#area-table, .split-pane-divider').css('bottom', paneheight);
        $('#tableorder').css('height', paneheight);
        
        // set default area
        var tabindex = $('#areas li a').index($('#areas li a[href="#area-@SmsCache.UserContext.DefaultAreaID"]'));
        if (tabindex < 0)
            tabindex = 0;
        $('#area-table').tabs({ active: tabindex });
        
        $("#payment").button({
            icons: {
                primary: "ui-icon-check"
            }
        }).click(function() {
            var orderId = $('#curOrderID').val();
            if(orderId <= 0)
                return false;
            
            var useServiceFee = $("#chkUseServiceFee").is(':checked');
            var useTax = [];
            $('input[id^="chkUseTax-"]').each(function(idx, e) {
                useTax[idx] = $(e).is(':checked');
            });
            
            //TODO: create new popup 1 time only
            var payment = new PaymentPopup("pdtPayment", 500, '@Url.Action("GetDataForPayment")', getCurrentOrderId , 'payment-detail-pdtPayment', 'print-tax-pdtPayment', '@Url.Action("Payment")', refreshPage, useServiceFee, useTax);
            payment.OpenPopup();
            return false;
        });

        $("#saveCashierInfo").button({
            icons: {
                primary: "ui-icon-star"
            },
            text: false
        }).click(function() {
            var tabId = -1;
            var selectedTab = $('#areas li.ui-state-active a');
            if (selectedTab.length > 0) {
                tabId = selectedTab.attr('href').split('-')[1];
            }
            var height = -1;
            var divider = $('#tableorder');
            if (divider.length > 0) {
                var heightInPx = divider.height();
                var parentHeightInPx = divider.offsetParent().height();
                height = (100 * heightInPx / parentHeightInPx).toFixed(2);
            }

            SaveCashierInfo(tabId, height);
            return false;
        });
        
        $('#button-payment').hide();
        $('#order-header').hide();

        GetTablesByAreaID(tabindex);
            
        setInterval(function() {
            refreshTableArea();
        }, 60000);
        
        setInterval(function() {
            refreshOrderArea();
        }, 120000);
    });
    
    /* Table area behavior */
    
    function refreshTableArea() {
        var area = $('#areas li.ui-tabs-active a[href*="area-"]').attr('href');
        var id = area.split('-')[1];
        GetTablesByAreaID(id);
    }

    $(document).on("click", '#areas li a[href*="area-"]', (function(e) {
        GetTablesByAreaID($(e.target).attr('href').split('-')[1]);
        return false;
    }));

    $(document).on("dblclick", ".tbls", (function(e) {
        $(".tbls").removeClass('selected');
        $(e.target).parents('.tbls').addClass('selected');
        var id = $(e.target).parents('.tbls').attr('id');
        var orderTableId = id.split('-')[0];
        var tblId = id.split('-')[1];
        var orderId = id.split('-')[2];
        if(orderTableId == 0) {
            var popup = new MessagePopup('Thông báo',
                'Bàn này hiện đang trống.<br />Sử dụng ngay?',
                3,
                function () {
                    onCheckTableStatus(orderTableId, tblId);
                });
            
            popup.OpenPopup();
        } else {
            onSelectOrderTable(orderTableId, orderId);
        }
        return false;
    }));
    
    $(document).on("click", ".tbls", (function(e){
        if(e.ctrlKey) {
            if ($(e.target).parents('.tbls').hasClass('selected')) {
                $(e.target).parents('.tbls').removeClass('selected');
            } else {
                $(e.target).parents('.tbls').addClass('selected');
            }
        } else {
            $(".tbls").removeClass('selected');
            $(e.target).parents('.tbls').addClass('selected');
        }
        return false;
    }));
    
    /* End Table area behavior */

    /* Detail area behavior */
    
    $(document).on("click", 'a[id^="addProduct-"]', (function(e){
        productPopup.OpenPopup();
        $('#curOrderTableID').val($(e.currentTarget).attr('id').split('-')[1]);
        return false;
    }));

    $(document).on("click", "#changeTable", (function(e){
        var orderTableId = $(e.currentTarget).attr('data-id');
        if (orderTableId > 0) {
            //TODO: create new popup 1 time only
            var popup = new DestinationTablePopup("destinationTablePopup", orderTableId, listArea, '@Url.Action("GetTablesByAreaID")', onMoveOrderTable);
                popup.OpenPopup();
            }
        return false;
    }));
    
    $(document).on("click", "#changeCustomer", (function(){
        var orderId = $('#curOrderID').val();
        if (orderId > 0) {
            //TODO: create new popup 1 time only
            var popup = new CustomerPopup("pdtCustomer", orderId, '@Url.Action("")', changeCustomer);
            popup.OpenPopup();
        }
        return false;
    }));
        
    $(document).on("change", 'input[id^="cmt"]', (function(){
        updateOrderedProduct(this);
    }));    
    
    $(document).on("click", 'div[id^="sendToKitchen-"]', (function(){
        var orderTableId = $(this).attr('id').split('-')[1];
        sendToKitchen(orderTableId);
        return false;
    }));  

    $(document).on("click", 'a[id^="removeTable-"]', (function(){
        var orderTableId = $(this).attr('id').split('-')[1];
        onDeleteOrderTable(orderTableId);
        return false;
    }));
   
    $(document).on("change", 'input[id^="discount-"]', (function(){
        $(this).val($(this).val().formatAsMoney());
        updateOrderedProduct(this);
    }));

    $(document).on("change", 'input[name="number"]', (function(){
        $(this).val($(this).val().formatAsMoney());
    }));
    
    $(document).on("click", 'div[id^="del"]', (function(){
        var orderDetailId = $(this).attr('id').split('-')[1];
        deleteOrderedProduct(orderDetailId);
        return false;
    }));

    $(document).on("click", 'div[id^="status"]', (function(){
        UpdateOrderedProductStatus(this);
        return false;
    }));
    
    $(document).on("click", '#edit-other-fee', (function(){
        if($(this).hasClass('icon-edit-info')) {
            $('#valueOtherFee').hide();
            $('#txtOtherFee').show();
            $('#txtOtherFeeDescription').show();
            $(this).removeClass('icon-edit-info');
            $(this).addClass('icon-save-info');
            $('#cancel-other-fee').show();
        } else {
            var orderId = $('#curOrderID').val();
            var otherFee = $('#txtOtherFee').val().readMoneyAsNumber();
            var otherFeeDescription = $('#txtOtherFeeDescription').val().trim();
                
            if(otherFee != $('#valueOtherFee').text().readMoneyAsNumber() || otherFeeDescription != $(this).attr('data'))
                saveOtherFee(orderId, otherFee, otherFeeDescription);

            $('#valueOtherFee').show();
            $('#txtOtherFee').hide();
            $('#txtOtherFeeDescription').hide();
            $(this).removeClass('icon-save-info');
            $(this).addClass('icon-edit-info');
            $('#cancel-other-fee').hide();
        }
        return false;
    }));
    
    $(document).on("click", '#cancel-other-fee', (function(){
        refreshOrderArea();
        return false;
    }));
    
    $(document).on("click", '#chkUseServiceFee', (function(){
        if($(this).is(':checked')) {
            $('#ServiceFree').removeClass('icon-disable');
        } else {
            $('#ServiceFree').addClass('icon-disable');
        }
        CalculateTotal();
        return false;
    }));

    $(document).on("click", 'input[id^="chkUseTax-"]', (function(){
        var type = $(this).attr('id').split('-')[1];
        if($(this).is(':checked')) {
            $('#tax-' + type).removeClass('icon-disable');
        } else {
            $('#tax-' + type).addClass('icon-disable');
        }
        CalculateTotal();
        return false;
    }));
      
    $(document).on("click", '#edit-discount', (function(){
        var orderId = $('#curOrderID').val();
        if(orderId < 1)
            return false;
        
        if($(this).hasClass('icon-edit-info')) {
            $('.discountAmount').hide();
            $('#discountCurrency').hide();

            $(this).removeClass('icon-edit-info');
            $(this).addClass('icon-save-info');
            $('#cancel-discount').show();

            getOrderDiscounts(orderId);
        } else {
            var discountType = $('#discount-type').val();
            var discount = $('#discount').val().trim();

            var orderDiscounts = new  Array();
            orderDiscounts[orderDiscounts.length] = {DiscountType : discountType, Discount: discount, DiscountCode: "", DiscountComment: ""};

            saveOrderDiscounts(orderId, orderDiscounts);
        }
        return false;
    }));

    $(document).on("click", '#cancel-discount', (function(){
        refreshOrderArea();
        return false;
    }));
      
    /* End Detail area behavior */

    /* Helper functions */
    
    function updateOrderedProduct(e) {
        var colName = $(e).attr('id').split('-')[0]; 
        if(colName == 'qty' || colName == 'discount') {
            if(!$(e).valid())
                return;
        }

        var orderDetailId = $(e).attr('id').split('-')[1];
        var value = $(e).val();
        updateOrderDetail(orderDetailId, colName, value);
    }

    /* End Helper functions */

    $(document).on("click", 'tr[id^="rmenu-"]', (function(){
        onSelectedItem(this);
        return false;
    }));
        
    $(document).on("contextmenu", ".cashier", function(e) {
        if($(e.target).parents('.tbls').length <= 0) {
            $("#right-menu").hide();
            //displayCustomMenu('#mainRightMenu', e);
        } else {
            $('#mainRightMenu').hide();
            if (!$(e.target).parents('.tbls').hasClass('selected')) {
                $(".tbls").removeClass('selected');
                $(e.target).parents('.tbls').addClass('selected');
            }

            displayCustomMenu('#right-menu', e);
        }
        return false;
    });
        
    $(document).click(function(e) {
        $("#right-menu").hide();
        $('#mainRightMenu').hide();
        
        if(!$(e.target).parents('table').hasClass('tbls')) {
            if ($(e.target).parents('#area-table').length > 0 || $(e.target).attr('id') == 'area-table')
                $(".tbls").removeClass('selected');
        }

        if(!$(e.target).hasClass('link-label') || $(e.target).attr('id') == null) {
            $("#changeCustomer").hide();
            $("#changeTable").hide();
        }
    });

    $(document).on("click", ".link-label", (function(e){
        $("#changeCustomer").hide();
        $("#changeTable").hide();
        if($(e.currentTarget).attr('id') == 'lblCustomerName')
            displayCustomMenu('#changeCustomer', e);
        else if ($(e.currentTarget).attr('id') == 'lblTableName') {
            $('#changeTable').attr('data-id', $(e.currentTarget).attr('data-id'));
            displayCustomMenu('#changeTable', e);
        }
        return false;
    }));
    
    
    $(document).on("click", "#mainRightMenu", (function(){
        refreshPage();
        return false;
    }));
    
    function refreshPage() {
        refreshTableArea();
        refreshOrderArea();
    }

    function getCurrentOrderId() {
        return $('#curOrderID').val();
    }
        
    function clearDisplayTableDetail(orderId) {
        if ($('#curOrderID').val() == orderId) {
            $('#tblContent').html('');
            $('#curOrderID').val(-1);
            $('#curOrderNumber').text('');
            $('#curCustomerName').text('');
            $("#addProduct").hide();
            $('#button-payment').hide();
            $('#order-header').hide();
            CalculateTotal();
        }
    }
    
    function onLoadOrderTable(result) {
        $('#table-detail-' + result.Data.ID).html($('#ordertable-tmpl').tmpl(result.Data));

        SetupOrderTable();
    }

    function SetupOrderTable() {
        $('table[id^="order-"]').table();

        $('input[id^="qty"]').spinner({
            step: 0.5,
            numberFormat: "n",
            min: 0.5,
            change: function() {
                $(this).val($(this).val().readMoneyAsNumber());
                updateOrderedProduct(this);
                $(this).val($(this).val().formatAsMoney());
            }
        });
        
        $('#cancel-other-fee').hide();
        $('#cancel-discount').hide();
        
        $('form[id^="form-table-order-"]').validate({
            rules: {
                qty: {
                    greaterThanZero: true
                },
                discount: {
                    greaterOrEqualZero: true
                }
            }
        });
        
        CalculateTotal();
    }

    function sendToKitchen(orderTableId) {
        if (orderTableId != '' && orderTableId > 0) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("SendToKitchen")',
                data: { orderTableID: orderTableId }
            }).done(function(result) {
                if (result.Success) {
                    refreshOrderArea();
                }
            });
        }
    }

    function deleteOrderedProduct(orderDetailId) {
        if (orderDetailId != '' && orderDetailId > 0) {
            var popup = new MessagePopup('Thông báo',
                'Xóa thông tin này khỏi hệ thống.<br />Bạn muốn thực hiện?',
                3,
                function() {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("RemoveOrderedProduct")',
                        data: { orderDetailID: orderDetailId }
                    }).done(function(result) {
                        if (result.Success) {
                            $('tr[id="' + orderDetailId + '"]').remove();
                            CalculateTotal();
                        }
                    });
                });
            popup.OpenPopup();
        }
    }

    
    
    function onSelectedItem(e) {
        var action = $(e).attr('id');
        var data = [],
            arr = [],
            popup,
            valid = true,
            i;
        $('.tbls').each(function(idx, element) {
            if($(element).hasClass('selected')) {
                var orderTableId = $(element).attr('id').split('-')[0];
                var tableId = $(element).attr('id').split('-')[1];
                var orderId = $(element).attr('id').split('-')[2];
                
                data[data.length] = { OrderTableID: orderTableId, TableID: tableId, OrderID: orderId };
            }
        });
        
        if(action == 'rmenu-detail') {
            if (data.length > 1) {
                popup = new MessagePopup('Thông báo',
                    'Thao tác không chính xác.<br />Xin vui lòng chọn một bàn để xem chi tiết.',
                    4,
                    function() {
                        refreshTableArea();
                    });

                popup.OpenPopup();
            } else {
                if (data[0].OrderTableID > 0)
                    onSelectOrderTable(data[0].OrderTableID, data[0].OrderID);
            }
        } else if(action == 'rmenu-useTable') {
            if (data.length > 1) {
                for (i = 0; i < data.length; i++) {
                    if (data[i].OrderTableID > 0) {
                        valid = false;
                        break;
                    }
                    arr[arr.length] = data[i].TableID;
                }
                if (!valid) {
                    popup = new MessagePopup('Thông báo',
                        'Thao tác không chính xác.<br />Xin vui lòng thử lại.',
                        4,
                        function() {
                            refreshTableArea();
                        });
                    popup.OpenPopup();
                } else {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("CreateMultiOrderTable")',
                        dataType: "json",
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify({ table: arr })
                    }).done(function(result) {
                        if (result.Success && result.Data > 0) {
                            $('#curOrderID').val(result.Data);
                            refreshPage();
                        }
                    });
                    return false;
                }
            } else {
                onCheckTableStatus(data[0].OrderTableID, data[0].TableID);
                return false;
            }
        } else if(action == 'rmenu-move') {
            if (data.length > 1) {
                popup = new MessagePopup('Thông báo',
                    'Thao tác không chính xác. Chỉ có thể chuyển dữ liệu từng bàn<br />Xin vui lòng thử lại.',
                    4,
                    function() {
                        refreshTableArea();
                    });

                popup.OpenPopup();
            } else {
                if (data[0].OrderTableID > 0) {
                    popup = new DestinationTablePopup("destinationTablePopup", data[0].OrderTableID, listArea, '@Url.Action("GetTablesByAreaID")', onMoveOrderTable);
                    popup.OpenPopup();
                }
            }
        } else if(action == 'rmenu-pooling') {
            for (i = 0; i < data.length; i++) {
                if (data[i].OrderTableID == 0) {
                    valid = false;
                    break;
                }
                arr[arr.length] = data[i].OrderTableID;
            }
            if (!valid) {
                popup = new MessagePopup('Thông báo',
                    'Thao tác không chính xác.<br />Xin vui lòng thử lại.',
                    4,
                    function() {
                        refreshTableArea();
                    });
                popup.OpenPopup();
            } else {
                popup = new MessagePopup('Nhập chung bàn',
                    'Hệ thống sẽ nhập chung dữ liệu về bàn đầu tiên trong danh sách.<br />Bạn muốn thực hiện?',
                    3,
                    function() {
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("PoolingTable")',
                            dataType: "json",
                            contentType: "application/json; charset=utf-8",
                            data: JSON.stringify({ orderTable: arr })
                        }).done(function(object) {
                            if (!object.Success) {
                                popup = new MessagePopup('Thông báo',
                                    'Có lỗi xảy ra trong quá trình thực thi.<br />Xin vui lòng thử lại sau.',
                                    4,
                                    function() {
                                    });

                                popup.OpenPopup();
                            }
                            refreshPage();
                        });
                        return false;
                    });

                popup.OpenPopup();
            }
        } else if(action == 'rmenu-del') {
            for (i = 0; i < data.length; i++) {
                if (data[i].OrderID > 0) {
                    arr[arr.length] = data[i].OrderID;
                }
            }
            if (arr.length > 0) {
                popup = new MessagePopup('Thông báo',
                    'Thao tác xóa thông tin các bàn được chọn.<br />Bạn muốn thực hiện?',
                    3,
                    function() {
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("RemoveMultiOrder")',
                            dataType: "json",
                            contentType: "application/json; charset=utf-8",
                            data: JSON.stringify({ order: arr })
                        }).done(function(result) {
                            if (!result.Success) {
                                popup = new MessagePopup('Thông báo',
                                    'Có lỗi xảy ra trong quá trình thực thi.<br />Xin vui lòng thử lại sau.',
                                    4,
                                    function() {
                                    });

                                popup.OpenPopup();
                            }
                            refreshPage();
                        });
                        return false;
                    });

                popup.OpenPopup();
            }
        }
        return false;
    }
        
    function displayCustomMenu(menuName, event) {
        var $menu = $(menuName);
        var $wMenu = $menu.outerWidth();
        var $hMenu = $menu.outerHeight();
        var $leftM = event.clientX, $topM = event.clientY;
        var $rightM = $(window).width() - $leftM;

        var $bottomM = $(window).height() - $topM;
        if ($rightM < $wMenu) {
            $leftM -= $wMenu;
        }
        if ($bottomM < $hMenu) {
            $topM -= $hMenu;
        }
        $menu.css({ left: $leftM, top: $topM });
        $menu.show();
        event.preventDefault();
    }
    
    function CalculateTotal() {
        var subTotal,
            sumAmount = 0,
            totalAmount,
            fee = 0,
            otherfee,
            orderdiscount,
            tax = 0;
        
        $('table[id^="order-"]').each(function(idx, e) {
            subTotal = 0;
            $(e).find('tbody[id^="table-detail-"] tr').each(function(index, element) {
                var qty = $(element).find('td input[id^="qty"]').val().readMoneyAsNumber();
                var price = $(element).find('td.product-price').text().readMoneyAsNumber();
                var discount = $(element).find('td input[id^="discount"]').length == 0 ? 0 : $(element).find('td input[id^="discount"]').val().readMoneyAsNumber();
                var total = qty*price - discount ;
                subTotal += total;
                $(element).find('td.sequence').text(index + 1);
                $(element).find('td.item_subtotal').text(total.formatAsMoney());
            });
            
            sumAmount += subTotal;
            $(e).find('.sub-total').text(subTotal.formatAsMoney());
        });
        
        $('#totalSection .sum_amount').text(sumAmount.formatAsMoney());

        if($('#totalSection .fee').length > 0) {
            fee = $('#totalSection .fee').text().readMoneyAsNumber();
            $('#totalSection .fee').text(fee.formatAsMoney());
        }

        if(!$('#chkUseServiceFee').is(':checked'))
            fee = 0;

        otherfee = $('#txtOtherFee').length > 0 ? $('#txtOtherFee').val().readMoneyAsNumber() : 0;

        orderdiscount = $('#totalSection .discountAmount').text().readMoneyAsNumber();

        sumAmount = sumAmount > 0 ? sumAmount + fee + otherfee - orderdiscount : 0;
        
        $('#totalSection .total').text(sumAmount.formatAsMoney());

        $('#totalSection div[id^="tax-"]').each(function(index, element) {
            if($(element).find('input[id^="chkUseTax-"]').is(':checked'))
            {
                var value = $(element).find('span[id^="tax-value-"]').text();
                tax += sumAmount > 0 ? sumAmount * value / 100 : 0;
                $(element).find('span[id^="tax-amount-"]').text((sumAmount * value / 100).formatAsMoney());
            } else {
                $(element).find('span[id^="tax-amount-"]').text('0');
            }
        });

        totalAmount = sumAmount + tax;

        $('#totalSection .total_amount').text(totalAmount.formatAsMoney());
    }
    
    /* Post to Controller functions */

    function SaveCashierInfo(tabId, height) {
        if (tabId < 0 || height < 0)
            return;

        $.ajax({
            type: 'POST',
            url: '@Url.Action("SaveCashierInfo", "Cashier", new { area = "" })',
                data: {
                    DefaultAreaID: tabId,
                    ListTableHeight: height
                }
            });
    }

    function GetTablesByAreaID(areaId) {
        if (areaId < 0) {
            return;
        }
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetTablesByAreaID")',
            data: { areaID: areaId }
        }).done(function (result) {
            if(result.Success) {
                $('#area-' + areaId).html($('#table-tmpl').tmpl(result));
                $('#rightMenuArea').html('');

                $('.tbls').each(function(idx, element) {
                    var orderId = $('#curOrderID').val() == '' ? 0 : $('#curOrderID').val();
                    if ($(element).attr('id').split('-')[2] > 0 && $(element).attr('id').split('-')[2] == orderId)
                        $(element).addClass('selected');
                });
            }
        });
    }

    function refreshOrderArea() {
        var orderId = $('#curOrderID').val();
        if(orderId > 0) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetOrder")',
                data: { orderID: orderId }
            }).done(function (result) {
                if (!result.Success || result.Data.ID == 0) {
                    clearDisplayTableDetail(orderId);
                }
                else {
                    $('#curOrderID').val(result.Data.ID);
                    $('#curOrderNumber').text(result.Data.OrderNumber);
                    $('#curCustomerName').text(result.Data.Customer == null ? result.Data.CustomerName : result.Data.Customer.CustomerName);
                    $('#tblContent').html($('#order-tmpl').tmpl(result.Data).scanLabel());

                    SetupOrderTable();

                    $('#button-payment').show();
                    $('#order-header').show();
                }
            });
        }
    }
    
    function changeCustomer(orderId, customerId, customerName, address, cellPhone, dob) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("ChangeCustomer")',
            data: { orderID: orderId, customerID: customerId, customerName: customerName, address: address, cellPhone: cellPhone, dob: dob }
        }).done(function () {
            refreshOrderArea();
        });
    }
    
    function updateOrderDetail(orderDetailId, colName, value) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("UpdateOrderedProduct")',
            data: { orderDetailID: orderDetailId, columnName: colName, columnValue: value }
        }).done(function (result) {
            if(!result.Success) {
                var popup = new MessagePopup('Thông báo',
                    'Có lỗi xảy ra trong quá trình thực thi.<br />Xin vui lòng thử lại sau.',
                    4,
                    function() {
                    });

                popup.OpenPopup();
            } else {
                CalculateTotal();
            }
        });
    }
    
    function onRemoveOrderTable(orderTableId, orderId) {
        if (orderTableId <= 0) {
            return;
        }
        $.ajax({
            type: 'POST',
            url: '@Url.Action("CancelOrder")',
            data: { orderTableID: orderTableId }
        }).done(function(result) {
            if (result.Success) {
                clearDisplayTableDetail(orderId);
            } else {
                var popup = new MessagePopup('Thông báo',
                    'Có lỗi xảy ra trong quá trình thực thi.<br />Xin vui lòng thử lại sau.',
                    4,
                    function() {
                    });

                popup.OpenPopup();
            }

            refreshTableArea();
        });
    }

    function onMoveOrderTable(orderTableId, tableId) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("MoveTable")',
            data: { orderTableID: orderTableId, tableID: tableId }
        }).done(function (result) {
            if(!result.Success) {
                var popup = new MessagePopup('Thông báo',
                    'Có lỗi xảy ra trong quá trình thực thi.<br />Xin vui lòng thử lại sau.',
                    4,
                    function() {
                    });

                popup.OpenPopup();
            } else {
                refreshPage();
            }
        });
    }
    
    
    function UpdateOrderedProductStatus(e) {
        var orderDetailId = $(e).attr('id').split('-')[1];
        var value = parseInt($(e).attr('id').split('-')[2]);
        
        switch (value) {
            case @((int)OrderStatus.Ordered):
                value = @((int)OrderStatus.SentToKitchen);
            break;
        case @((int)OrderStatus.SentToKitchen):
                value = @((int)OrderStatus.KitchenAccepted);
            break;
        case @((int)OrderStatus.KitchenAccepted):
                value = @((int)OrderStatus.Done);
            break;
        case @((int)OrderStatus.KitchenRejected):
                value = @((int)OrderStatus.SentToKitchen);
            break;
        case @((int)OrderStatus.Done):
                return;
        }
        
        $.ajax({
            type: 'POST',
            url: '@Url.Action("UpdateOrderedProductStatus")',
            data: { orderDetailID: orderDetailId, value: value }
        }).done(function (result) {
            if(!result.Success) {
                var popup = new MessagePopup('Thông báo',
                    'Có lỗi xảy ra trong quá trình thực thi.<br />Xin vui lòng thử lại sau.',
                    4,
                    function() {
                    });

                popup.OpenPopup();
            } else {
                $(e).attr('id', 'status-' + result.Data.ID + '-' + result.Data.OrderStatus);
                $(e).attr('title', GetOrderStatusName(result.Data.OrderStatus));
                var cssClass;
                switch (result.Data.OrderStatus) {
                    case @((int)OrderStatus.Ordered):
                        cssClass = 'transfer';
                        break;
                    case @((int)OrderStatus.SentToKitchen):
                        cssClass = 'pending';
                        break;
                    case @((int)OrderStatus.KitchenAccepted):
                        cssClass = 'accept';
                        break;
                    case @((int)OrderStatus.KitchenRejected):
                        cssClass = 'reject';
                        break;
                    case @((int)OrderStatus.Done):
                        cssClass = 'done';
                        break;
                    default :
                        cssClass = 'done';
                }
                $(e).attr('class', 'icon-' + cssClass);
            }
        });
    }

    function onCheckTableStatus(orderTableId, tableId) {
        if (orderTableId == 0) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("CheckTableStatus")',
                data: { tableID: tableId }
            }).done(function(result) {
                if (result.Success) {
                    var popup = new MessagePopup('Thông báo',
                        'Bàn này hiện đang được sử dụng.<br />Xin vui lòng thử lại.',
                        4,
                        function() {
                            refreshTableArea();
                        });

                    popup.OpenPopup();
                } else {
                    onCreateOrderTable(tableId);
                }
            });
        }else {
            onCreateOrderTable(tableId);
        }
    }

    function onDeleteOrderTable(orderTableId) {
        if(orderTableId <= 0)
            return;
        else {
            var popup = new MessagePopup('Thông báo',
                'Bạn đang thực hiện xóa thông tin 1 bàn.<br />Bạn muốn thực hiện?',
                3,
                function() {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("CancelTable")',
                        data: { orderTableID: orderTableId }
                    }).done(function(result) {
                        if (result.Success) {
                            refreshPage();
                        }
                    });
                });

                popup.OpenPopup();
            }
        }

    function onSelectOrderTable(orderTableId, orderId) {
        $("#right-menu").hide();
        if (orderTableId <= 0) {
            return;
        }
        $.ajax({
            type: 'POST',
            url: '@Url.Action("SelectTable")',
            data: { orderTableID: orderTableId }
        }).done(function(result) {
            if (result.Data.ID == 0 || !result.Success) {
                var popup = new MessagePopup('Thông báo',
                    'Dữ liệu hiện không tồn tại.<br />Xin vui lòng thử lại.',
                    4,
                    function() {
                        refreshTableArea();
                        clearDisplayTableDetail(orderId);
                    });

                popup.OpenPopup();
            } else {
                $('#curOrderID').val(result.Data.ID);
                $('#curOrderNumber').text(result.Data.OrderNumber);
                $('#curCustomerName').text(result.Data.Customer == null ? result.Data.CustomerName : result.Data.Customer.CustomerName);
                $('#tblContent').html($('#order-tmpl').tmpl(result.Data).scanLabel());

                SetupOrderTable();

                $('#button-payment').show();
                $('#order-header').show();
                refreshTableArea();
            }
        });
    }

    function onCreateOrderTable(tblId) {
        if (tblId <= 0) {
            return;
        }
        $.ajax({
            type: 'POST',
            url: '@Url.Action("CreateOrderTable")',
            data: { tableID: tblId }
        }).done(function (result) {
            if(result.Success) {
                $('#curOrderID').val(result.Data);
                refreshPage();
            }
        });
        return;
    }

    function onRefreshProduct(reloadCallback) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetAllProductsForSearch")',
        }).done(function (result) {
            if(result.Success) {
                listProduct = result.Data;
                if(reloadCallback)
                    reloadCallback(listProduct);
            }
        });
    }

    function onSelectProduct(pdtId, qty) {
        var orderTableId = $('#curOrderTableID').val();
        if(orderTableId != '' && orderTableId > 0) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("OrderProduct")',
                data: { orderTableID: orderTableId, productID: pdtId, quantity: qty }
            }).done(function(result) {
                if (result.Data.ID > 0 && result.Success) {
                    onLoadOrderTable(result);
                }
            });
        }
    }
    
    function saveOtherFee(orderId, otherFee, otherFeeDescription) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("UpdateOtherFee")',
                    data: { orderID: orderId, otherFee: otherFee, otherFeeDescription: otherFeeDescription }
        }).done(function(result) {
            if (result.Success) {
                refreshOrderArea();
            }
        });
    }
    
    function getOrderDiscounts(orderId) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetOrderDiscount")',
                data: { orderID: orderId }
        }).done(function(result) {
            if (result.Success) {
                $('#order-discount').html($('#discount-tmpl').tmpl(result));
            }
        });
    }

    function saveOrderDiscounts(orderId, orderDiscounts) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("SaveOrderDiscount")',
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ orderID: orderId, orderDiscounts: orderDiscounts })
        }).done(function(result) {
            if (result.Success) {
                refreshOrderArea();
            }
        });
    }
    /* End Post to Controller functions */
</script>